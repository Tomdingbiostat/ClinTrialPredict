# }
#
# # Scenario 5
# else if(l>s & l>m & l>=s+m){
#   P.delta.0 <-  integral2(f2,0   ,s ,0 ,m)$Q
# }
}
CensRate(N=100,d=12,s=5,m=3,l=2, alpha=1,nu=5)
CensRate <- function(N,d,s,m,l,alpha,nu){
P.delta.0 <- d/N
f2.0 <- function(a,t,gamma){
1/s * dweibull(t,shape=alpha,scale = nu) * (1-pexp(t,rate=0.001))
}
# Scenario 1
if(l<=s & l<=m){
P.delta.0.0 <-  integral2(f2.0, 0, l, 0, function(x) l-x)$Q
print(P.delta.0.0)
# if(P.delta.0 > P.delta.0.0){
#   stop("Error: can not acheieve the expected number of events")
# } else{
#   of <- function(gamma){
#
#   }
# }
}
# # Scenario 2
# else if(l<=s & l>m){
#   P.delta.0 <- integral2(f2,0,l-m,0,m)$Q +
#     integral2(f2,l-m,l,0,function(x) l-x)$Q
#
# }
#
# # Scenario 3
# else if(l>s & l<=m){
#   P.delta.0 <-  integral2(f2, 0, s, 0, function(x) l-x)$Q
# }
#
# # Scenario 4
# else if(l>s & l>m & l <s+m){
#   P.delta.0 <-  integral2(f2,0   ,l-m ,0 ,m)$Q +
#     integral2(f2,l-m ,s   ,0 ,function(x) l-x)$Q
# }
#
# # Scenario 5
# else if(l>s & l>m & l>=s+m){
#   P.delta.0 <-  integral2(f2,0   ,s ,0 ,m)$Q
# }
}
CensRate(N=100,d=12,s=5,m=3,l=2, alpha=1,nu=5)
CensRate <- function(N,d,s,m,l,alpha,nu){
P.delta.0 <- d/N
print("P.delta.0:",P.delta.0)
f2.0 <- function(a,t,gamma){
1/s * dweibull(t,shape=alpha,scale = nu) * (1-pexp(t,rate=0.001))
}
# Scenario 1
if(l<=s & l<=m){
P.delta.0.0 <-  integral2(f2.0, 0, l, 0, function(x) l-x)$Q
print(P.delta.0.0)
# if(P.delta.0 > P.delta.0.0){
#   stop("Error: can not acheieve the expected number of events")
# } else{
#   of <- function(gamma){
#
#   }
# }
}
# # Scenario 2
# else if(l<=s & l>m){
#   P.delta.0 <- integral2(f2,0,l-m,0,m)$Q +
#     integral2(f2,l-m,l,0,function(x) l-x)$Q
#
# }
#
# # Scenario 3
# else if(l>s & l<=m){
#   P.delta.0 <-  integral2(f2, 0, s, 0, function(x) l-x)$Q
# }
#
# # Scenario 4
# else if(l>s & l>m & l <s+m){
#   P.delta.0 <-  integral2(f2,0   ,l-m ,0 ,m)$Q +
#     integral2(f2,l-m ,s   ,0 ,function(x) l-x)$Q
# }
#
# # Scenario 5
# else if(l>s & l>m & l>=s+m){
#   P.delta.0 <-  integral2(f2,0   ,s ,0 ,m)$Q
# }
}
CensRate(N=100,d=12,s=5,m=3,l=2, alpha=1,nu=5)
CensRate <- function(N,d,s,m,l,alpha,nu){
P.delta.0 <- d/N
print(paste("P.delta.0:",P.delta.0))
f2.0 <- function(a,t,gamma){
1/s * dweibull(t,shape=alpha,scale = nu) * (1-pexp(t,rate=0.001))
}
# Scenario 1
if(l<=s & l<=m){
P.delta.0.0 <-  integral2(f2.0, 0, l, 0, function(x) l-x)$Q
print(P.delta.0.0)
# if(P.delta.0 > P.delta.0.0){
#   stop("Error: can not acheieve the expected number of events")
# } else{
#   of <- function(gamma){
#
#   }
# }
}
# # Scenario 2
# else if(l<=s & l>m){
#   P.delta.0 <- integral2(f2,0,l-m,0,m)$Q +
#     integral2(f2,l-m,l,0,function(x) l-x)$Q
#
# }
#
# # Scenario 3
# else if(l>s & l<=m){
#   P.delta.0 <-  integral2(f2, 0, s, 0, function(x) l-x)$Q
# }
#
# # Scenario 4
# else if(l>s & l>m & l <s+m){
#   P.delta.0 <-  integral2(f2,0   ,l-m ,0 ,m)$Q +
#     integral2(f2,l-m ,s   ,0 ,function(x) l-x)$Q
# }
#
# # Scenario 5
# else if(l>s & l>m & l>=s+m){
#   P.delta.0 <-  integral2(f2,0   ,s ,0 ,m)$Q
# }
}
CensRate(N=100,d=12,s=5,m=3,l=2, alpha=1,nu=5)
CensRate <- function(N,d,s,m,l,alpha,nu){
P.delta.0 <- d/N
print(paste("P.delta.0:",P.delta.0))
f2.0 <- function(a,t,gamma){
1/s * dweibull(t,shape=alpha,scale = nu) * (1-pexp(t,rate=0.001))
}
# Scenario 1
if(l<=s & l<=m){
P.delta.0.0 <-  integral2(f2.0, 0, l, 0, function(x) l-x)$Q
print(paste("P.delta.0.0",P.delta.0.0))
# if(P.delta.0 > P.delta.0.0){
#   stop("Error: can not acheieve the expected number of events")
# } else{
#   of <- function(gamma){
#
#   }
# }
}
# # Scenario 2
# else if(l<=s & l>m){
#   P.delta.0 <- integral2(f2,0,l-m,0,m)$Q +
#     integral2(f2,l-m,l,0,function(x) l-x)$Q
#
# }
#
# # Scenario 3
# else if(l>s & l<=m){
#   P.delta.0 <-  integral2(f2, 0, s, 0, function(x) l-x)$Q
# }
#
# # Scenario 4
# else if(l>s & l>m & l <s+m){
#   P.delta.0 <-  integral2(f2,0   ,l-m ,0 ,m)$Q +
#     integral2(f2,l-m ,s   ,0 ,function(x) l-x)$Q
# }
#
# # Scenario 5
# else if(l>s & l>m & l>=s+m){
#   P.delta.0 <-  integral2(f2,0   ,s ,0 ,m)$Q
# }
}
CensRate(N=100,d=12,s=5,m=3,l=2, alpha=1,nu=5)
CensRate(N=100,d=5,s=5,m=3,l=2, alpha=1,nu=5)
?rweibull
?optimize
CensRate <- function(N,d,s,m,l,alpha,nu){
P.delta.0 <- d/N
print(paste("P.delta.0:",P.delta.0))
f2.0 <- function(a,t){
1/s * dweibull(t,shape=alpha,scale = nu) * (1-pexp(t,rate=0.001))
}
# Scenario 1
if(l<=s & l<=m){
P.delta.0.0 <-  integral2(f2.0, 0, l, 0, function(x) l-x)$Q
print(paste("P.delta.0.0",P.delta.0.0))
if(P.delta.0 > P.delta.0.0){
stop("Error: can not acheieve the expected number of events")
} else{
of <- function(gamma){
f2.1 <- function(a,t){
1/s * dweibull(t,shape=alpha,scale = nu) * (1-pexp(t,rate=gamma))
}
int <- integral2(f2.1, 0, l, 0, function(x) l-x)$Q
abs(int - P.delta.0)
}
gamma <- optimize(of,lower = 0.001)
}
}
# # Scenario 2
# else if(l<=s & l>m){
#   P.delta.0 <- integral2(f2,0,l-m,0,m)$Q +
#     integral2(f2,l-m,l,0,function(x) l-x)$Q
#
# }
#
# # Scenario 3
# else if(l>s & l<=m){
#   P.delta.0 <-  integral2(f2, 0, s, 0, function(x) l-x)$Q
# }
#
# # Scenario 4
# else if(l>s & l>m & l <s+m){
#   P.delta.0 <-  integral2(f2,0   ,l-m ,0 ,m)$Q +
#     integral2(f2,l-m ,s   ,0 ,function(x) l-x)$Q
# }
#
# # Scenario 5
# else if(l>s & l>m & l>=s+m){
#   P.delta.0 <-  integral2(f2,0   ,s ,0 ,m)$Q
# }
}
CensRate(N=100,d=5,s=5,m=3,l=2, alpha=1,nu=5)
CensRate <- function(N,d,s,m,l,alpha,nu){
P.delta.0 <- d/N
print(paste("P.delta.0:",P.delta.0))
f2.0 <- function(a,t){
1/s * dweibull(t,shape=alpha,scale = nu) * (1-pexp(t,rate=0.001))
}
# Scenario 1
if(l<=s & l<=m){
P.delta.0.0 <-  integral2(f2.0, 0, l, 0, function(x) l-x)$Q
print(paste("P.delta.0.0",P.delta.0.0))
if(P.delta.0 > P.delta.0.0){
stop("Error: can not acheieve the expected number of events")
} else{
of <- function(gamma){
f2.1 <- function(a,t){
1/s * dweibull(t,shape=alpha,scale = nu) * (1-pexp(t,rate=gamma))
}
int <- integral2(f2.1, 0, l, 0, function(x) l-x)$Q
abs(int - P.delta.0)
}
gamma <- optimize(of,interval = c(0,10*nu))
}
}
# # Scenario 2
# else if(l<=s & l>m){
#   P.delta.0 <- integral2(f2,0,l-m,0,m)$Q +
#     integral2(f2,l-m,l,0,function(x) l-x)$Q
#
# }
#
# # Scenario 3
# else if(l>s & l<=m){
#   P.delta.0 <-  integral2(f2, 0, s, 0, function(x) l-x)$Q
# }
#
# # Scenario 4
# else if(l>s & l>m & l <s+m){
#   P.delta.0 <-  integral2(f2,0   ,l-m ,0 ,m)$Q +
#     integral2(f2,l-m ,s   ,0 ,function(x) l-x)$Q
# }
#
# # Scenario 5
# else if(l>s & l>m & l>=s+m){
#   P.delta.0 <-  integral2(f2,0   ,s ,0 ,m)$Q
# }
}
CensRate(N=100,d=5,s=5,m=3,l=2, alpha=1,nu=5)
CensRate <- function(N,d,s,m,l,alpha,nu){
P.delta.0 <- d/N
print(paste("P.delta.0:",P.delta.0))
f2.0 <- function(a,t){
1/s * dweibull(t,shape=alpha,scale = nu) * (1-pexp(t,rate=0.001))
}
# Scenario 1
if(l<=s & l<=m){
P.delta.0.0 <-  integral2(f2.0, 0, l, 0, function(x) l-x)$Q
print(paste("P.delta.0.0",P.delta.0.0))
if(P.delta.0 > P.delta.0.0){
stop("Error: can not acheieve the expected number of events")
} else{
of <- function(gamma){
f2.1 <- function(a,t){
1/s * dweibull(t,shape=alpha,scale = nu) * (1-pexp(t,rate=gamma))
}
int <- integral2(f2.1, 0, l, 0, function(x) l-x)$Q
abs(int - P.delta.0)
}
gamma <- optimize(of,interval = c(0,10*nu))
return(gamma)
}
}
# # Scenario 2
# else if(l<=s & l>m){
#   P.delta.0 <- integral2(f2,0,l-m,0,m)$Q +
#     integral2(f2,l-m,l,0,function(x) l-x)$Q
#
# }
#
# # Scenario 3
# else if(l>s & l<=m){
#   P.delta.0 <-  integral2(f2, 0, s, 0, function(x) l-x)$Q
# }
#
# # Scenario 4
# else if(l>s & l>m & l <s+m){
#   P.delta.0 <-  integral2(f2,0   ,l-m ,0 ,m)$Q +
#     integral2(f2,l-m ,s   ,0 ,function(x) l-x)$Q
# }
#
# # Scenario 5
# else if(l>s & l>m & l>=s+m){
#   P.delta.0 <-  integral2(f2,0   ,s ,0 ,m)$Q
# }
}
CensRate(N=100,d=5,s=5,m=3,l=2, alpha=1,nu=5)
NumEventsObs(N=100,s=5,m=3,l=2, alpha=1,nu=5,gamma=0.6047)
#### predict number of events for a single arm ####
# N: number of subjects enrolled
# s: enrollment period
# m: maximum follow-up for a single subject
# alpha: shape parameter of a weibull distribution for survival time
# nu: scale parameter of a weibull distribution for survival time
# gamma: rate of an exponential distribution for random censoring time
# d: number of expected events observed
NumEventsSub <- function(N,s,m,l,alpha,nu,gamma,d){
f2 <- function(a,t){
1/s * dweibull(t,shape=alpha,scale = nu) * (1-pexp(t,rate=gamma))
}
# Scenario 1
if(l<=s & l<=m){
P.delta.0 <-  integral2(f2, 0, l, 0, function(x) l-x)$Q
}
# Scenario 2
else if(l<=s & l>m){
P.delta.0 <- integral2(f2,0,l-m,0,m)$Q +
integral2(f2,l-m,l,0,function(x) l-x)$Q
}
# Scenario 3
else if(l>s & l<=m){
P.delta.0 <-  integral2(f2, 0, s, 0, function(x) l-x)$Q
}
# Scenario 4
else if(l>s & l>m & l <s+m){
P.delta.0 <-  integral2(f2,0   ,l-m ,0 ,m)$Q +
integral2(f2,l-m ,s   ,0 ,function(x) l-x)$Q
}
# Scenario 5
else if(l>s & l>m & l>=s+m){
P.delta.0 <-  integral2(f2,0   ,s ,0 ,m)$Q
}
res <- list(
P.delta.0=P.delta.0
,d=ifelse(missing(d),N * P.delta.0,d)
,N=ifelse(missing(N),d / P.delta.0,N)
,s=s
,m=m
,l=l
,alpha=alpha
,nu=nu
,gamma=gamma
)
return(res)
}
# (s1 <- NumEventsObs(N=100,s=5,m=3,l=2,  alpha=1,nu=5,gamma=1)) # l<s, l<m
# (s2 <- NumEventsObs(N=100,s=5,m=3,l=4,  alpha=1,nu=5,gamma=1)) # l<s, l>m
# (s3 <- NumEventsObs(N=100,s=5,m=7,l=6,  alpha=1,nu=5,gamma=1)) # l>s, l<=m
# (s4 <- NumEventsObs(N=100000,s=5,m=7,l=6,  alpha=1,nu=5,gamma=1)) # l>s, l>m, l < m + s
# (s5 <- NumEventsObs(N=100000,s=5,m=7,l=13,  alpha=1,nu=5,gamma=1)) # l>s, l>m, l > m + s
NumEventsObs(N=100,s=5,m=3,l=2, alpha=1,nu=5,gamma=0.6047)
NumEventsSub(N=100,s=5,m=3,l=2, alpha=1,nu=5,gamma=0.6047)
library(devtools)
create_package("C:/Users/YDing29/OneDrive/Biostatistics goal/survival simulation/ClinTrialPredict/")
library(devtools)
install_github("Tomdingbiostat/ClinTrialPredict")
install_github("Tomdingbiostat/ClinTrialPredict")
install_github("Tomdingbiostat/ClinTrialPredict")
install.packages('remote')
install.packages('remotes')
remotes::install_github("Tomdingbiostat/ClinTrialPredict")
remotes::install_github("Tomdingbiostat/ClinTrialPredict")
remotes::install_github("jennybc/regexcite")
library(regexcite)
remotes::install_github("Tomdingbiostat/ClinTrialPredict", ref="master")
library(ClinTrialPredict)
library(ClinTrialPredict)
integral.s1
?integral.s1
TrialPred.TwoArm
TrialPred.TwoArm
1
+2
1+2
1+
2
+2
1 \
1 \
library(ggplot2)
library(tidyverse)
library(pracma)
files <- list.files("./R", pattern = "\\.R$", full.names = TRUE)
lapply(files, source)
meanD <- function(N.0,N.1,alpha0.t,nu0.t,HR,gamma.c,s,m,l){
design <- TrialPred.TwoArm(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l)
ds <- SimDataTwoArm(design = design,seed=1235,nsim=10)
ds %>% arrange(sim,arm) %>%  group_by(sim) %>% summarise(sumD=sum(event)) %>% ungroup() %>% summarise(meanD = mean(sumD)) %>% {.[["meanD"]]}
}
meanD(N.0=200,N.1=200,alpha0.t = 1,nu0.t=20,HR=0.8,gamma.c=0.1,s=12,m=6,l=10)
meanD(N.0=200,N.1=200,alpha0.t = 1,nu0.t=20,HR=0.8,gamma.c=0.1,s=12,m=6,l=10)
meanD(N.0=200,N.1=200,alpha0.t = 1,nu0.t=20,HR=0.8,gamma.c=0.1,s=12,m=6,l=10)
library(ggplot2)
library(tidyverse)
library(pracma)
files <- list.files("./R", pattern = "\\.R$", full.names = TRUE)
lapply(files, source)
meanD <- function(N.0,N.1,alpha0.t,nu0.t,HR,gamma.c,s,m,l){
design <- TrialPred.TwoArm(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l)
ds <- SimDataTwoArm(design = design,seed=1234,nsim=100)
ds %>% arrange(sim,arm) %>%  group_by(sim) %>% summarise(sumD=sum(event)) %>% ungroup() %>% summarise(meanD = mean(sumD)) %>% {.[["meanD"]]}
}
meanD(N.0=200,N.1=200,alpha0.t = 1,nu0.t=20,HR=0.8,gamma.c=0.1,s=12,m=6,l=10)
meanD(N.0=200,N.1=200,alpha0.t = 1,nu0.t=20,HR=0.8,gamma.c=0.1,s=12,m=6,l=10)
meanD(N.0=200,N.1=200,alpha0.t = 1,nu0.t=20,HR=0.8,gamma.c=0.1,s=12,m=6,l=10)
meanD <- function(N.0,N.1,alpha0.t,nu0.t,HR,gamma.c,s,m,l){
design <- TrialPred.TwoArm(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l)
ds <- SimDataTwoArm(design = design,seed=123,nsim=100)
ds %>% arrange(sim,arm) %>%  group_by(sim) %>% summarise(sumD=sum(event)) %>% ungroup() %>% summarise(meanD = mean(sumD)) %>% {.[["meanD"]]}
}
meanD(N.0=200,N.1=200,alpha0.t = 1,nu0.t=20,HR=0.8,gamma.c=0.1,s=12,m=6,l=10)
meanD <- function(N.0,N.1,alpha0.t,nu0.t,HR,gamma.c,s,m,l){
design <- TrialPred.TwoArm(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l)
ds <- SimDataTwoArm(design = design,seed=1234,nsim=100)
ds %>% arrange(sim,arm) %>%  group_by(sim) %>% summarise(sumD=sum(event)) %>% ungroup() %>% summarise(meanD = mean(sumD)) %>% {.[["meanD"]]}
}
meanD <- function(N.0,N.1,alpha0.t,nu0.t,HR,gamma.c,s,m,l){
design <- TrialPred.TwoArm(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l)
ds <- SimDataTwoArm(design = design,seed=1234,nsim=100)
ds %>% arrange(sim,arm) %>%  group_by(sim) %>% summarise(sumD=sum(event)) %>% ungroup() %>% summarise(meanD = mean(sumD)) %>% {.[["meanD"]]}
}
res <- designs %>% rowwise() %>% mutate( ED = TrialPred.TwoArm(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l)$d
,meanD = meanD(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l))
designs <- expand_grid(N.0,N.1,m,s,alpha0.t,nu0.t,HR=HR,gamma.c,l)
N.0 <- 200
N.1 <- 200
m <- 6
s <- 12
alpha0.t <- c(1)
nu0.t <- 20
HR <- c(0.8,1,1.5)
gamma.c <- c(0.1,0.2,0.3)
l <- c(3,9,15,20)
designs <- expand_grid(N.0,N.1,m,s,alpha0.t,nu0.t,HR=HR,gamma.c,l)
res <- designs %>% rowwise() %>% mutate( ED = TrialPred.TwoArm(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l)$d
,meanD = meanD(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l))
View(res)
meanD <- function(N.0,N.1,alpha0.t,nu0.t,HR,gamma.c,s,m,l){
design <- TrialPred.TwoArm(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l)
ds <- SimDataTwoArm(design = design,seed=1234,nsim=1000)
ds %>% arrange(sim,arm) %>%  group_by(sim) %>% summarise(sumD=sum(event)) %>% ungroup() %>% summarise(meanD = mean(sumD)) %>% {.[["meanD"]]}
}
res <- designs %>% rowwise() %>% mutate( ED = TrialPred.TwoArm(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l)$d
,meanD = meanD(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l))
meanD <- function(N.0,N.1,alpha0.t,nu0.t,HR,gamma.c,s,m,l){
design <- TrialPred.TwoArm(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l)
ds <- SimDataTwoArm(design = design,seed=1234,nsim=10000)
ds %>% arrange(sim,arm) %>%  group_by(sim) %>% summarise(sumD=sum(event)) %>% ungroup() %>% summarise(meanD = mean(sumD)) %>% {.[["meanD"]]}
}
res <- designs %>% rowwise() %>% mutate( ED = TrialPred.TwoArm(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l)$d
,meanD = meanD(N.0=N.0,N.1=N.1,alpha0.t = alpha0.t,nu0.t=nu0.t,HR=HR,gamma.c=gamma.c,s=s,m=m,l=l))
document()
library(devtools)
document()
document()
document()
document()
document()
document()
install()
library(ClinTrialPredict)
View(example)
library(ClinTrialPredict)
TrialPred.OneArm
load_all()
install()
use_package(pracma)
use_package('pracma')
document()
View(library.dynam)
use_readme_rmd()
export(TrialPred.TwoArm)
export('TrialPred.TwoArm')
library(devtools)
export('TrialPred.TwoArm')
library(devtools)
library(devtools)
?export
??export
export(TrialPred.TwoArm)
library(roxygen2)
export(TrialPred.TwoArm)
document()
document()
document()
document()
document()
?rexp
library(devtools)
